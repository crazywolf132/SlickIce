<?php

namespace DoctrineProxies\__CG__\Concrete\Core\Entity\Attribute;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Set extends \Concrete\Core\Entity\Attribute\Set implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'keys', 'category', 'asID', 'asHandle', 'asName', 'asDisplayOrder', 'asIsLocked', 'package'];
        }

        return ['__isInitialized__', 'keys', 'category', 'asID', 'asHandle', 'asName', 'asDisplayOrder', 'asIsLocked', 'package'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Set $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getAttributeKeyCollection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeKeyCollection', []);

        return parent::getAttributeKeyCollection();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeKeys()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeKeys', []);

        return parent::getAttributeKeys();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeKeys($keys)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeKeys', [$keys]);

        return parent::setAttributeKeys($keys);
    }

    /**
     * {@inheritDoc}
     */
    public function clearAttributeKeys()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearAttributeKeys', []);

        return parent::clearAttributeKeys();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeKeyCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeKeyCategory', []);

        return parent::getAttributeKeyCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeKeyCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeKeyCategory', [$category]);

        return parent::setAttributeKeyCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeSetID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeSetID', []);

        return parent::getAttributeSetID();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeSetHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeSetHandle', []);

        return parent::getAttributeSetHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeSetHandle($asHandle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeSetHandle', [$asHandle]);

        return parent::setAttributeSetHandle($asHandle);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeSetName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeSetName', []);

        return parent::getAttributeSetName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeSetName($asName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeSetName', [$asName]);

        return parent::setAttributeSetName($asName);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeSetDisplayOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeSetDisplayOrder', []);

        return parent::getAttributeSetDisplayOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeSetKeyCategoryID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeSetKeyCategoryID', []);

        return parent::getAttributeSetKeyCategoryID();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeSetDisplayOrder($asDisplayOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeSetDisplayOrder', [$asDisplayOrder]);

        return parent::setAttributeSetDisplayOrder($asDisplayOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function isAttributeSetLocked()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttributeSetLocked', []);

        return parent::isAttributeSetLocked();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributeSetIsLocked($asIsLocked)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributeSetIsLocked', [$asIsLocked]);

        return parent::setAttributeSetIsLocked($asIsLocked);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeSetDisplayName($format = 'html')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeSetDisplayName', [$format]);

        return parent::getAttributeSetDisplayName($format);
    }

    /**
     * {@inheritDoc}
     */
    public function addKey(\Concrete\Core\Entity\Attribute\Key\Key $key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addKey', [$key]);

        return parent::addKey($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackage', []);

        return parent::getPackage();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackage($package)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackage', [$package]);

        return parent::setPackage($package);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageID', []);

        return parent::getPackageID();
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageHandle', []);

        return parent::getPackageHandle();
    }

}
