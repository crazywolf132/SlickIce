<?php

namespace DoctrineProxies\__CG__\Concrete\Core\Entity\Block\BlockType;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class BlockType extends \Concrete\Core\Entity\Block\BlockType\BlockType implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'controller', 'btIgnorePageThemeGridFrameworkContainer', 'btID', 'btHandle', 'btName', 'btDescription', 'btCopyWhenPropagate', 'btIncludeAll', 'btIsInternal', 'btSupportsInlineEdit', 'btSupportsInlineAdd', 'btDisplayOrder', 'btInterfaceHeight', 'btInterfaceWidth', 'pkgID'];
        }

        return ['__isInitialized__', 'controller', 'btIgnorePageThemeGridFrameworkContainer', 'btID', 'btHandle', 'btName', 'btDescription', 'btCopyWhenPropagate', 'btIncludeAll', 'btIsInternal', 'btSupportsInlineEdit', 'btSupportsInlineAdd', 'btDisplayOrder', 'btInterfaceHeight', 'btInterfaceWidth', 'pkgID'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (BlockType $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getBlockTypeInSetName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeInSetName', []);

        return parent::getBlockTypeInSetName();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockTypeIgnorePageThemeGridFrameworkContainer($btIgnorePageThemeGridFrameworkContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockTypeIgnorePageThemeGridFrameworkContainer', [$btIgnorePageThemeGridFrameworkContainer]);

        return parent::setBlockTypeIgnorePageThemeGridFrameworkContainer($btIgnorePageThemeGridFrameworkContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockTypeName($btName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockTypeName', [$btName]);

        return parent::setBlockTypeName($btName);
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockTypeDescription($btDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockTypeDescription', [$btDescription]);

        return parent::setBlockTypeDescription($btDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockTypeHandle($btHandle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockTypeHandle', [$btHandle]);

        return parent::setBlockTypeHandle($btHandle);
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageID($pkgID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageID', [$pkgID]);

        return parent::setPackageID($pkgID);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAddTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAddTemplate', []);

        return parent::hasAddTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeComposerTemplates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeComposerTemplates', []);

        return parent::getBlockTypeComposerTemplates();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeHandle', []);

        return parent::getBlockTypeHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function supportsInlineEdit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'supportsInlineEdit', []);

        return parent::supportsInlineEdit();
    }

    /**
     * {@inheritDoc}
     */
    public function supportsInlineAdd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'supportsInlineAdd', []);

        return parent::supportsInlineAdd();
    }

    /**
     * {@inheritDoc}
     */
    public function isInternalBlockType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInternalBlockType', []);

        return parent::isInternalBlockType();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeInterfaceWidth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeInterfaceWidth', []);

        return parent::getBlockTypeInterfaceWidth();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeInterfaceHeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeInterfaceHeight', []);

        return parent::getBlockTypeInterfaceHeight();
    }

    /**
     * {@inheritDoc}
     */
    public function ignorePageThemeGridFrameworkContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'ignorePageThemeGridFrameworkContainer', []);

        return parent::ignorePageThemeGridFrameworkContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageID', []);

        return parent::getPackageID();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeDescription', []);

        return parent::getBlockTypeDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeName', []);

        return parent::getBlockTypeName();
    }

    /**
     * {@inheritDoc}
     */
    public function isCopiedWhenPropagated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCopiedWhenPropagated', []);

        return parent::isCopiedWhenPropagated();
    }

    /**
     * {@inheritDoc}
     */
    public function includeAll()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'includeAll', []);

        return parent::includeAll();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeClassFromHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeClassFromHandle', []);

        return parent::getBlockTypeClassFromHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeClass', []);

        return parent::getBlockTypeClass();
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageHandle', []);

        return parent::getPackageHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeSets()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeSets', []);

        return parent::getBlockTypeSets();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeID', []);

        return parent::getBlockTypeID();
    }

    /**
     * {@inheritDoc}
     */
    public function getCount($ignoreUnapprovedVersions = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCount', [$ignoreUnapprovedVersions]);

        return parent::getCount($ignoreUnapprovedVersions);
    }

    /**
     * {@inheritDoc}
     */
    public function canUnInstall()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canUnInstall', []);

        return parent::canUnInstall();
    }

    /**
     * {@inheritDoc}
     */
    public function isBlockTypeInternal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBlockTypeInternal', []);

        return parent::isBlockTypeInternal();
    }

    /**
     * {@inheritDoc}
     */
    public function render($view = 'view')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'render', [$view]);

        return parent::render($view);
    }

    /**
     * {@inheritDoc}
     */
    public function getController()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getController', []);

        return parent::getController();
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockTypeCustomTemplates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockTypeCustomTemplates', []);

        return parent::getBlockTypeCustomTemplates();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockTypeDisplayOrder($displayOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockTypeDisplayOrder', [$displayOrder]);

        return parent::setBlockTypeDisplayOrder($displayOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function refresh()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'refresh', []);

        return parent::refresh();
    }

    /**
     * {@inheritDoc}
     */
    public function loadFromController($bta)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadFromController', [$bta]);

        return parent::loadFromController($bta);
    }

    /**
     * {@inheritDoc}
     */
    public function delete()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', []);

        return parent::delete();
    }

    /**
     * {@inheritDoc}
     */
    public function add($data, $c = false, $a = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'add', [$data, $c, $a]);

        return parent::add($data, $c, $a);
    }

    /**
     * {@inheritDoc}
     */
    public function loadController()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadController', []);

        return parent::loadController();
    }

}
