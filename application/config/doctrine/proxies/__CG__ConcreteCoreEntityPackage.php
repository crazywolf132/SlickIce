<?php

namespace DoctrineProxies\__CG__\Concrete\Core\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Package extends \Concrete\Core\Entity\Package implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'pkgID', 'pkgHandle', 'pkgVersion', 'pkgIsInstalled', 'pkgAvailableVersion', 'pkgDescription', 'pkgDateInstalled', 'pkgName'];
        }

        return ['__isInitialized__', 'pkgID', 'pkgHandle', 'pkgVersion', 'pkgIsInstalled', 'pkgAvailableVersion', 'pkgDescription', 'pkgDateInstalled', 'pkgName'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Package $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getPackageHandle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageHandle', []);

        return parent::getPackageHandle();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageHandle($pkgHandle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageHandle', [$pkgHandle]);

        return parent::setPackageHandle($pkgHandle);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageID()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageID', []);

        return parent::getPackageID();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageID($pkgID)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageID', [$pkgID]);

        return parent::setPackageID($pkgID);
    }

    /**
     * {@inheritDoc}
     */
    public function isPackageInstalled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPackageInstalled', []);

        return parent::isPackageInstalled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPackageInstalled($pkgIsInstalled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPackageInstalled', [$pkgIsInstalled]);

        return parent::setIsPackageInstalled($pkgIsInstalled);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageVersion', []);

        return parent::getPackageVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageVersion($pkgVersion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageVersion', [$pkgVersion]);

        return parent::setPackageVersion($pkgVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageVersionUpdateAvailable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageVersionUpdateAvailable', []);

        return parent::getPackageVersionUpdateAvailable();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageAvailableVersion($pkgAvailableVersion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageAvailableVersion', [$pkgAvailableVersion]);

        return parent::setPackageAvailableVersion($pkgAvailableVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageDescription', []);

        return parent::getPackageDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageDescription($pkgDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageDescription', [$pkgDescription]);

        return parent::setPackageDescription($pkgDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageDateInstalled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageDateInstalled', []);

        return parent::getPackageDateInstalled();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageDateInstalled($pkgDateInstalled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageDateInstalled', [$pkgDateInstalled]);

        return parent::setPackageDateInstalled($pkgDateInstalled);
    }

    /**
     * {@inheritDoc}
     */
    public function getPackageName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPackageName', []);

        return parent::getPackageName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPackageName($pkgName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPackageName', [$pkgName]);

        return parent::setPackageName($pkgName);
    }

    /**
     * {@inheritDoc}
     */
    public function getController()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getController', []);

        return parent::getController();
    }

    /**
     * {@inheritDoc}
     */
    public function __call($method, $arguments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$method, $arguments]);

        return parent::__call($method, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslationFile($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslationFile', [$locale]);

        return parent::getTranslationFile($locale);
    }

}
